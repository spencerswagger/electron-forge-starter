name: Release

on:
  push:
    tags:
      - "v*"

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_name: ${{ steps.create_release.outputs.name }}

    steps:
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: false


  build:
    name: build and release electron app
    needs: release
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest, macos-latest, ubuntu-latest ]

    steps:
      - name: Check out repo
        uses: actions/checkout@v3.0.0

      - name: Install Node.js
        uses: actions/setup-node@v3.0.0
        with:
          node-version: '16'

      - name: Install
        run: yarn

      - name: Release for Windows
        if: matrix.os == 'windows-latest'
        run: yarn make

      - name: Release for MacOS
        if: matrix.os == 'macos-latest'
        run: yarn make

      - name: Release for Linux
        if: matrix.os == 'ubuntu-latest'
        run: yarn make

      - name: Release for Windows ARM
        if: matrix.os == 'windows-latest'
        run: yarn make -a arm64

      - name: Release for MacOS ARM
        if: matrix.os == 'macos-latest'
        run: yarn make -a arm64

      - name: Release for Linux ARM
        if: matrix.os == 'ubuntu-latest'
        run: yarn make -a arm64

      - name: Upload assets
        uses: alexellis/upload-assets@0.2.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_paths: '["out/make/*.dmg","out/make/*/*/*.deb","out/make/*/*/*.rpm"]'

      - name: Get version
        id: get_version
        if: matrix.os == 'windows-latest'
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}


      - name: Upload release asset for Windows
        if: matrix.os == 'windows-latest'
        uses: sekwah41/upload-release-assets@v1.1.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ./out/make/*/x64/*.exe
          asset_name: hangzhou_ssg_application-${{ needs.release.outputs.release_name }}-x64.exe
          asset_content_type: application/exe

      - name: Upload release asset for Windows ARM
        if: matrix.os == 'windows-latest'
        uses: sekwah41/upload-release-assets@v1.1.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ./out/make/*/arm64/*.exe
          asset_name: hangzhou_ssg_application-${{ needs.release.outputs.release_name }}-arm64.exe
          asset_content_type: application/exe